/*! For license information please see main.dev.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/main/main.ts":(e,o,r)=>{var t,a=r("electron");function n(e,o){e.webContents.openDevTools(),e.loadURL(`http://localhost:3000/dist/${o}.html`).catch(console.error)}r("path"),e=r.hmd(e),(t="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&t(e),"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;let s=null;function l(){s||(s=new a.BrowserWindow({width:800,height:600,frame:!1,webPreferences:{javascript:!0,nodeIntegration:!0,webSecurity:!1,contextIsolation:!1}}),n(s,"index"),s.on("close",(()=>{s=null})))}var d,i;a.ipcMain.on("asynchronous-message",((e,o)=>{console.log("main:",o),e.reply("asynchronous-reply",`pong${o}`)})),a.ipcMain.handle("handle-message",(async()=>await Promise.resolve("123"))),a.app.commandLine.appendSwitch("enable-features","OverlayScrollbar"),a.app.whenReady().then((()=>{l(),a.app.on("activate",(()=>{0===a.BrowserWindow.getAllWindows().length&&l()}))})),a.app.on("window-all-closed",(()=>{"darwin"!==process.platform&&a.app.quit()})),(d="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(d.register(n,"loadHtml","/Users/bytedance/Desktop/workspace/electron-react-demo/src/main/main.ts"),d.register(s,"mainWindow","/Users/bytedance/Desktop/workspace/electron-react-demo/src/main/main.ts"),d.register(l,"createWindow","/Users/bytedance/Desktop/workspace/electron-react-demo/src/main/main.ts")),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(e)},electron:e=>{e.exports=require("electron")},path:e=>{e.exports=require("path")}},o={};function r(t){var a=o[t];if(void 0!==a)return a.exports;var n=o[t]={id:t,loaded:!1,exports:{}};return e[t](n,n.exports,r),n.loaded=!0,n.exports}r.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return r.d(o,{a:o}),o},r.d=(e,o)=>{for(var t in o)r.o(o,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),r("./src/main/main.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,